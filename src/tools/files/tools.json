[
  {
    "function": {
      "description": "Request to read the contents of a file at the specified path. Use this when you need to examine the contents of an existing file you do not know the contents of, for example to analyze code, review text files, or extract information from configuration files. Automatically extracts raw text from PDF and DOCX files. May not be suitable for other types of binary files, as it returns the raw content as a string.",
      "name": "fs_read",
      "parameters": {
        "properties": {
          "path": {
            "description": "The path of the file to read (relative to the current working directory ${WORKSPACE})",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      }
    },
    "type": "function"
  },
  {
    "function": {
      "description": "Request to list files and directories within the specified directory. If max_depth equals 1 or not provided, it will only list the top-level contents. If max_depth is greater than 1, it will list the contents of the directory and its subdirectories up to the specified depth. Do not use this tool to confirm the existence of files you may have created,as the user will let you know if the files were created successfully or not.",
      "name": "fs_list",
      "parameters": {
        "properties": {
          "max_depth": {
            "description": "Max depth to list files (default: 1)",
            "type": "number"
          },
          "path": {
            "description": "The path of the directory to list contents for (relative to the current working directory ${WORKSPACE})",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      }
    },
    "type": "function"
  },
  {
    "function": {
      "description": "Request to write content to a file at the specified path. If the file exists, it will be overwritten with the provided content. If the file doesn't exist, it will be created. This tool will automatically create any directories needed to write the file.",
      "name": "fs_write",
      "parameters": {
        "properties": {
          "content": {
            "description": "The content to write to the file. ALWAYS provide the COMPLETE intended content of the file, without any truncation or omissions. You MUST include ALL parts of the file, even if they haven't been modified.",
            "type": "string"
          },
          "path": {
            "description": "The path of the file to write to (relative to the current working directory ${WORKSPACE})",
            "type": "string"
          }
        },
        "required": [
          "path",
          "content"
        ],
        "type": "object"
      }
    },
    "type": "function"
  },
  {
    "function": {
      "description": "Request to replace sections of content in an existing file using SEARCH/REPLACE blocks that define exact changes to specific parts of the file. This tool should be used when you need to make targeted changes to specific parts of a file.",
      "name": "fs_replace",
      "parameters": {
        "properties": {
          "diff": {
            "description": "One or more SEARCH/REPLACE blocks following this exact format:\n  ```\n  <<<<<<< SEARCH\n  [exact content to find]\n  =======\n  [new content to replace with]\n  >>>>>>> REPLACE\n  ```\n  Critical rules:\n  1. SEARCH content must match the associated file section to find EXACTLY:\n     * Match character-for-character including whitespace, indentation, line endings\n     * Include all comments, docstrings, etc.\n  2. SEARCH/REPLACE blocks will ONLY replace the first match occurrence.\n     * Including multiple unique SEARCH/REPLACE blocks if you need to make multiple changes.\n     * Include *just* enough lines in each SEARCH section to uniquely match each set of lines that need to change.\n     * When using multiple SEARCH/REPLACE blocks, list them in the order they appear in the file.\n  3. Keep SEARCH/REPLACE blocks concise:\n     * Break large SEARCH/REPLACE blocks into a series of smaller blocks that each change a small portion of the file.\n     * Include just the changing lines, and a few surrounding lines if needed for uniqueness.\n     * Do not include long runs of unchanging lines in SEARCH/REPLACE blocks.\n     * Each line must be complete. Never truncate lines mid-way through as this can cause matching failures.\n  4. Special operations:\n     * To move code: Use two SEARCH/REPLACE blocks (one to delete from original + one to insert at new location)\n     * To delete code: Use empty REPLACE section\n",
            "type": "string"
          },
          "path": {
            "description": "The path of the file to modify (relative to the current working directory ${WORKSPACE})",
            "type": "string"
          }
        },
        "required": [
          "path",
          "diff"
        ],
        "type": "object"
      }
    },
    "type": "function"
  },
  {
    "function": {
      "description": "Request to perform a regex search across files in a specified directory, providing context-rich results. This tool searches for patterns or specific content across multiple files, displaying each match with encapsulating context.",
      "name": "fs_search",
      "parameters": {
        "properties": {
          "regex": {
            "description": "Glob pattern to filter files (e.g., '*.ts' for TypeScript files). If not provided, it will search all files (*).",
            "type": "string"
          },
          "path": {
            "description": "The path of the directory to search in (relative to the current working directory ${WORKSPACE}). This directory will be recursively searched.",
            "type": "string"
          }
        },
        "required": [
          "path",
          "regex"
        ],
        "type": "object"
      }
    },
    "type": "function"
  }
]
